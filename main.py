# phantom-ai-backend/main.py

from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional
import os # To access environment variables

# For API Key authentication
from fastapi.security import APIKeyHeader

# --- Your Placeholder AI Logic ---
# In a real scenario, this is where your actual AI model inference,
# calls to other AI services (like OpenAI), or more complex logic would go.
class SimpleAIGenerator:
    def __init__(self):
        # Initialize your AI models here if needed.
        # For a simple demo, we're just returning string responses.
        pass

    def generate_text(self, prompt: str, model: str = "default"):
        """
        Simulates AI text generation.
        Replace this with actual AI model inference.
        """
        if "hello" in prompt.lower():
            return "Hello from your Phantom AI! How can I assist you today?"
        elif "summarize" in prompt.lower():
            return f"Here's a concise summary of: '{prompt}' - Generated by Phantom AI."
        elif "code" in prompt.lower():
            return f"```python\n# AI-generated code example\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n# Example usage:\n# list(fibonacci(10))\n```"
        else:
            return f"Phantom AI says: '{prompt}'. This is a simulated AI response. Ready for more complex tasks!"

    def summarize_text(self, text: str, model: str = "default"):
        """
        Simulates AI text summarization.
        Replace this with actual AI summarization logic.
        """
        if len(text) > 100:
            return f"Summarizing: \"{text[:100]}...\". Key points by Phantom AI: [Summary goes here]."
        else:
            return f"Phantom AI: \"{text}\" is already quite short!"

# --- FastAPI Application Setup ---
app = FastAPI(
    title="Phantom AI Backend API",
    description="Your custom AI service powered by FastAPI.",
    version="1.0.0",
    docs_url="/docs", # Enable Swagger UI at /docs
    redoc_url="/redoc" # Enable ReDoc at /redoc
)

# --- API Key Authentication ---
# Get the API key from Render's environment variables
# IMPORTANT: In production, NEVER hardcode sensitive keys.
# Render will set PHANTOM_AI_API_KEY for you.
PHANTOM_AI_API_KEY = os.getenv("408701dc48577f62c145e0b98d8b759f")

# Basic check to ensure the key is set (will fail deployment if not)
if not PHANTOM_AI_API_KEY:
    raise ValueError("PHANTOM_AI_API_KEY environment variable not set. Please set it on Render.")

# Define the API key header for FastAPI
api_key_header = APIKeyHeader(name="X-API-Key", auto_error=True)

# Dependency to validate the API key for protected endpoints
async def get_api_key(api_key: str = Depends(api_key_header)):
    if api_key != PHANTOM_AI_API_KEY:
        raise HTTPException(status_code=403, detail="Could not validate credentials: Invalid API Key")
    return api_key

# Instantiate your AI generator
ai_generator = SimpleAIGenerator()

# --- Pydantic Models for Request Bodies ---
class TextGenerateRequest(BaseModel):
    prompt: str
    model: Optional[str] = "default"
    max_tokens: Optional[int] = 500

class TextSummarizeRequest(BaseModel):
    text: str
    model: Optional[str] = "default"
    max_tokens: Optional[int] = 200

# --- API Endpoints ---

@app.get("/")
async def root():
    """
    Root endpoint for a simple health check or welcome message.
    """
    return {"message": "Welcome to Phantom AI Backend API on Render! Access /docs for API documentation."}

@app.get("/health")
async def health_check():
    """
    Endpoint for health checks. Returns 200 OK if the service is running.
    """
    return {"status": "ok", "message": "Phantom AI Backend is running and healthy."}

@app.post("/api/v1/generate/text", dependencies=[Depends(get_api_key)])
async def generate_text_endpoint(request: TextGenerateRequest):
    """
    Generates text based on a given prompt using the Phantom AI.
    Requires 'X-API-Key' header for authentication.
    """
    try:
        generated_content = ai_generator.generate_text(
            request.prompt, request.model
        )
        return {"status": "success", "data": {"content": generated_content}}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"AI text generation failed: {str(e)}")

@app.post("/api/v1/summarize/text", dependencies=[Depends(get_api_key)])
async def summarize_text_endpoint(request: TextSummarizeRequest):
    """
    Summarizes the provided text using the Phantom AI.
    Requires 'X-API-Key' header for authentication.
    """
    try:
        summary = ai_generator.summarize_text(
            request.text, request.model
        )
        return {"status": "success", "data": {"summary": summary}}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"AI text summarization failed: {str(e)}")

# You can add more AI-related endpoints here as your project grows!
# E.g., for translation, sentiment analysis, image generation (requires more libraries), etc.# phantom-ai
