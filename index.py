# phantom-ai-api-vercel/api/index.py

from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional
import os
import traceback # For detailed error logging

# For API Key authentication
from fastapi.security import APIKeyHeader

# --- Your Placeholder AI Logic ---
# This class simulates AI text generation and summarization.
# In a real application, you would integrate with actual AI models or services here.
class SimpleAIGenerator:
    def __init__(self):
        # Initialization for AI models goes here if needed.
        pass

    def generate_text(self, prompt: str, model: str = "default"):
        """
        Simulates AI text generation based on the input prompt.
        """
        if "hello" in prompt.lower():
            return "Hello from your Phantom AI on Vercel! How can I assist you today?"
        elif "summarize" in prompt.lower():
            return f"Here's a concise summary of: '{prompt}' - Generated by Phantom AI on Vercel."
        elif "code" in prompt.lower():
            return f"```python\n# AI-generated code example\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n# Example usage:\n# list(fibonacci(10))\n```"
        else:
            return f"Phantom AI says: '{prompt}'. This is a simulated AI response from Vercel. Ready for more complex tasks!"

    def summarize_text(self, text: str, model: str = "default"):
        """
        Simulates AI text summarization for the given text.
        """
        if len(text) > 100:
            return f"Summarizing: \"{text[:100]}...\". Key points by Phantom AI on Vercel: [Summary goes here]."
        else:
            return f"Phantom AI on Vercel: \"{text}\" is already quite short!"

# --- FastAPI Application Setup ---
# The 'app' variable is the main FastAPI instance. Vercel will look for this.
app = FastAPI(
    title="Phantom AI Backend API (Vercel)",
    description="Your custom AI service powered by FastAPI, deployed as a serverless function on Vercel.",
    version="1.0.0",
    docs_url="/docs", # Enables Swagger UI at /docs endpoint
    redoc_url="/redoc" # Enables ReDoc documentation at /redoc endpoint
)

# --- API Key Authentication ---
# Retrieve the API key from Vercel's environment variables.
# Vercel automatically makes environment variables available via os.getenv.
PHANTOM_AI_API_KEY = os.getenv("PHANTOM_AI_API_KEY")

# This check ensures that the API key is set. If not, it prints a warning.
# In a production environment, you might want to prevent the application from starting
# or return a more severe error if the key is missing to ensure security.
if not PHANTOM_AI_API_KEY:
    print("WARNING: PHANTOM_AI_API_KEY environment variable not set. API will not be protected.")

# Defines the API key header that clients must send.
api_key_header = APIKeyHeader(name="X-API-Key", auto_error=True)

# Dependency function to validate the incoming API key.
# This function is used by endpoints that require authentication.
async def get_api_key(api_key: str = Depends(api_key_header)):
    # Checks if the provided API key matches the one set in environment variables.
    if not PHANTOM_AI_API_KEY or api_key != PHANTOM_AI_API_KEY:
        raise HTTPException(status_code=403, detail="Could not validate credentials: Invalid API Key")
    return api_key

# Instantiate the AI generator
ai_generator = SimpleAIGenerator()

# --- Pydantic Models for Request Bodies ---
# These models define the expected structure of JSON data for incoming requests,
# allowing FastAPI to automatically validate and parse the request body.
class TextGenerateRequest(BaseModel):
    prompt: str
    model: Optional[str] = "default"
    max_tokens: Optional[int] = 500

class TextSummarizeRequest(BaseModel):
    text: str
    model: Optional[str] = "default"
    max_tokens: Optional[int] = 200

# --- API Endpoints ---

@app.get("/")
async def root():
    """
    Root endpoint for a simple health check or welcome message.
    Accessible without an API key.
    """
    return {"message": "Welcome to Phantom AI Backend API on Vercel! Access /docs for API documentation."}

@app.get("/health")
async def health_check():
    """
    Health check endpoint. Returns 200 OK if the service is running.
    Accessible without an API key.
    """
    return {"status": "ok", "message": "Phantom AI Backend is running and healthy on Vercel."}

@app.post("/api/v1/generate/text", dependencies=[Depends(get_api_key)])
async def generate_text_endpoint(request: TextGenerateRequest):
    """
    Generates text based on a given prompt using the Phantom AI.
    Requires 'X-API-Key' header for authentication.
    """
    try:
        generated_content = ai_generator.generate_text(
            request.prompt, request.model
        )
        return {"status": "success", "data": {"content": generated_content}}
    except Exception as e:
        # Print full traceback to Vercel logs for debugging
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"AI text generation failed: {str(e)}")

@app.post("/api/v1/summarize/text", dependencies=[Depends(get_api_key)])
async def summarize_text_endpoint(request: TextSummarizeRequest):
    """
    Summarizes the provided text using the Phantom AI.
    Requires 'X-API-Key' header for authentication.
    """
    try:
        summary = ai_generator.summarize_text(
            request.text, request.model
        )
        return {"status": "success", "data": {"summary": summary}}
    except Exception as e:
        # Print full traceback to Vercel logs for debugging
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"AI text summarization failed: {str(e)}")

